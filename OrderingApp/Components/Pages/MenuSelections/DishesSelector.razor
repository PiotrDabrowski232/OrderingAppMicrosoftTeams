@page "/DishesSelector/OrderId/{OrderId:guid}"

@if (IsLoading)
{
    <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh;">
        <FluentProgressRing />
    </div>
}
else
{
    <BackToMainPageLinker Color="Primary" Link="@($"/Orderdetails/{Order.Id.ToString()}")" CustomText="Back to order details"/>

    <h3>Dishes Selector</h3>

    <div style="margin: 4rem;">
        @if (ListChanged && OrderItems.Any())
        {
            <div style="text-align: right; margin-top: 1rem;">
                <button type="button" class="btn btn-success" @onclick="() => SaveChanges()">Save Changes</button>
            </div>
        }
    </div>
    @if (OrderItems.Any())
    {  
        <div>
            <table class="table" style="text-align: center; width: 70%;  margin: auto; margin-bottom:4vh;">
                <thead>
                    <tr>
                        <th scope="col">Amount</th>
                        <th scope="col">Dish Name</th>
                        <th scope="col">Calories</th>
                        <th scope="col">Price</th>
                        <th scope="col">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var x in OrderItems)
                    {
                        <tr>
                            <td>@x.Amount</td>
                            <td>@x.Dish.Name</td>
                            <td>@x.Dish.Calories cal</td>
                            <td>@x.Dish.Price zł</td>
                            <td>
                                <button style="padding:0;" type="button" class="btn" @onclick="() => AddDish(x.Dish)">
                                    <i style="font-size: 1.5rem;" class="bi bi-patch-plus-fill"></i>
                                </button>
                                <button style="padding:0;" type="button" class="btn" @onclick="() => RemoveDish(x.Dish)">
                                    <i style="font-size: 1.5rem;" class="bi bi-patch-minus-fill"></i>
                                </button>
                            </td>
                        </tr>
                    }
                    <tr style="border-top: 3px solid black;">
                        <td colspan="2" style="text-align:end;">Order Value: </td>
                        <td>@SumCalories cal</td>
                        <td>@Math.Round(SumPrice, 2) zł</td>
                        <td></td>
                    </tr>
                    <tr>
                        <td colspan="3" style="text-align:end;">Delivery Price:</td>
                        <td>@Math.Round(@DeliveryPrice(), 2) zł</td>
                        <td></td>
                    </tr>
                    <tr style="border-top: 3px solid black;">
                        <td colspan="3" style="text-align:end;">Total: </td>
                            <td>@Math.Round(SumPrice + DeliveryPrice(), 2) zł</td>
                        <td></td>
                    </tr>
                </tbody>
            </table>
        </div>
    }

    <div>
        <table class="table" style="text-align: center; width: 70%;  margin: auto; margin-bottom:4vh;">
            <thead>
                <tr>
                    <th scope="col">Dish Name</th>
                    <th scope="col">Calories</th>
                    <th scope="col">Price</th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach(var x in Menu.Main)
                {
                    <FluentTooltip Anchor="@($"{x.Id}")" Position=TooltipPosition.Bottom>
                        <strong>
                            @x.Description
                        </strong>
                    </FluentTooltip>
                    <tr>
                        <td>
                            @x.Name
                            <i Id="@x.Id" style="color: black;" class="bi bi-info-circle-fill"></i>
                        </td>
                        <td>@x.Calories cal</td>
                        <td>@x.Price zł</td>
                        <td>
                            <button style="padding:0;" type="button" class="btn" @onclick="() => AddDish(x)">
                                <i style="font-size: 1.5rem;" class="bi bi-patch-plus-fill"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div style="padding-bottom: 4vh;">
        <table class="table" style="text-align: center; width: 70%;  margin: auto; margin-bottom:4vh;">
            <thead>
                <tr>
                    <th scope="col">Dish Name</th>
                    <th scope="col">Calories</th>
                    <th scope="col">Price</th>
                    <th scope="col">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var x in Menu.Extras)
                {
                    <FluentTooltip Anchor="@($"{x.Id}")" Position=TooltipPosition.Bottom>
                        <strong>
                            @x.Description
                        </strong>
                    </FluentTooltip>
                    <tr>
                        <td>
                            @x.Name
                            <i Id="@x.Id" style="color: black;" class="bi bi-info-circle-fill"></i>
                        </td>
                        <td>@x.Calories cal</td>
                        <td>@x.Price zł</td>
                        <td>
                            <button style="padding:0;" type="button" class="btn" @onclick="() => AddDish(x)">
                                <i style="font-size: 1.5rem;" class="bi bi-patch-plus-fill"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}


@code {
    [Parameter]
    public Guid OrderId { get; set; }

    private List<OrderItemsDto> OrderItems = new List<OrderItemsDto>();
    private MenuDto Menu = new(); 
    private OrderBasicInfoDto Order = new();
    private Guid Restaurant;
    private int SumCalories;
    private float SumPrice;
    private float Total;


    private string User;
    private bool IsLoading = true;
    private bool ListChanged = false;
    private bool FreeDelivery = false;


    protected override async Task OnInitializedAsync()
    {
        Restaurant = await _mediator.Send(new GetRestaurantSignedOrderQuery(OrderId));

        Menu = await _mediator.Send(new GetRestaurantDishesExtrasQuery(Restaurant));

        Order = await _mediator.Send(new GetOrderBasicInfoForCurrentOrderQuery(OrderId));

        Total = _valueComputationService.CalculateTotalOrderprice(Order.Id);
        FreeDelivery = Order.FreeDeliveryFrom <= Total;

        IsLoading = false;
        StateHasChanged();
    }

    private void AddDish(DishDto dish)
    {
        if (OrderItems.Any(x => x.Dish.Id == dish.Id))
            OrderItems.FirstOrDefault(x => x.Dish.Id == dish.Id).Amount++;
        else
            OrderItems.Add(new OrderItemsDto
            {
                Amount=1,
                Dish = dish,
            });

        Calculate();

        ListChanged = true;

        StateHasChanged();
    }

    private void RemoveDish(DishDto dish)
    {
        var orderItem = OrderItems.FirstOrDefault(x => x.Dish.Id == dish.Id);

        if (orderItem.Amount > 1)
            orderItem.Amount--;
        else
            OrderItems.Remove(orderItem);

        Calculate();

        ListChanged = true;

        StateHasChanged();
    }

    private async Task SaveChanges()
    {
        try
        {
                var orderComleted = await _mediator.Send(new AddCurrentOrderItemsCommand(OrderId, OrderItems));

                ShowSuccessToast("Assigment created successfully with order items");

                await Task.Delay(3000);

                Navigation.NavigateTo($"/Orderdetails/{orderComleted}");
            
        }
        catch(Exception ex)
        {
            ShowErrorToast(ex);
        }
    }

    private void ShowSuccessToast(string message)
    {
        ToastService.ShowToast(ToastIntent.Success, $"{message}");
    }

    private void ShowErrorToast(Exception ex)
    {
        ToastService.ShowToast(ToastIntent.Error, $"{ex.Message}");
    }

    private void Calculate()
    {
        _valueComputationService.CalculateCalories(OrderItems, out SumCalories);
        _valueComputationService.CalculatePrice(OrderItems, out SumPrice);
        if ((Total + SumPrice) > Order.FreeDeliveryFrom && !FreeDelivery)
        {
            FreeDelivery = true;
        }
        else if ((Total + SumPrice) < Order.FreeDeliveryFrom && FreeDelivery)
        {
            FreeDelivery = false;
        }
    }

    private float DeliveryPrice()
    {
        if (FreeDelivery)
            return 0;
        else
            return Order.DeliveryCost / (Order.OrderSignupCount == 0 ? 1 : Order.OrderSignupCount + 1);
    }
}
